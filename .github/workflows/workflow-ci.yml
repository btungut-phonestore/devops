on:
  workflow_call: 
    inputs:
      
      runs-on:
        type: string
        description: 'Runs on'

      gitops-helm-chart-path:
        required: true
        type: string
        description: 'Gitops helm chart path'

      build-docker-context-path:
        required: true
        type: string
        description: 'Docker context path'

      build-docker-file-path:
        required: true
        type: string
        description: 'Dockerfile path'

      docker-server:
        required: true
        type: string
        description: 'Docker registry server'

      docker-repository:
        required: true
        type: string
        description: 'Docker repository name'

      docker-build-only:
        required: false
        default: false
        type: boolean
        description: 'Docker build only'

    secrets:
      docker-username:
        required: true
        description: 'Docker username for login to docker registry'
      docker-password:
        required: true
        description: 'Docker password for login to docker registry'
      gh-token:
        required: true
        description: 'Github token for gitops'

    outputs:
      GIT_COMMIT_ID:
        value: ${{ jobs.build_and_push.outputs.GIT_COMMIT_ID }}
      GIT_COMMIT_MSG:
        value: ${{ jobs.build_and_push.outputs.GIT_COMMIT_MSG }}
      GIT_COMITTER:
        value: ${{ jobs.build_and_push.outputs.GIT_COMITTER }}
      GIT_COMMIT_DATE:
        value: ${{ jobs.build_and_push.outputs.GIT_COMMIT_DATE }}
      DOCKER_REPO:
        value: ${{ jobs.build_and_push.outputs.DOCKER_REPO }}
      DOCKER_TAG:
        value: ${{ jobs.build_and_push.outputs.DOCKER_TAG }}
      REV_DATE:
        value: ${{ jobs.build_and_push.outputs.REV_DATE }}
      REV_UNIQUE:
        value: ${{ jobs.build_and_push.outputs.REV_UNIQUE }}

jobs:
  init:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      BRANCH_TYPE: ${{ steps.override_vars.outputs.BRANCH_TYPE }}
      BRANCH_NAME: ${{ steps.override_vars.outputs.BRANCH_NAME }}
      DOCKER_TAG: ${{ steps.override_vars.outputs.DOCKER_TAG }}
    steps:
      - uses: btungut-phonestore/devops/.github/actions/common@master
        id: common-vars

      - name: override_vars
        id: override_vars
        shell: bash
        run: |
          set -euo pipefail

          BRANCH_TYPE="master"
          REF_NAME="${{ github.ref_name }}"


          ### Populate BRANCH_TYPE
          if [[ $REF_NAME =~ feature ]]; then
            BRANCH_TYPE="feature"
          elif [[ $REF_NAME =~ release ]]; then
            echo "Flow for release branch is not implemented yet"
            exit 1
          elif [[ $REF_NAME =~ hotfix ]]; then
            echo "Flow for hotfix branch is not implemented yet"
            exit 1
          fi
          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV
          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_OUTPUT
          echo "BRANCH_TYPE=$BRANCH_TYPE"



          ### Populate BRANCH_NAME
          BRANCH_NAME="$REF_NAME"
          BRANCH_NAME="${BRANCH_NAME//\//-}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME"



          ### Populate DOCKER_TAG
          DOCKER_TAG="${{ steps.common-vars.outputs.rev-name }}"
          [ -z "${DOCKER_TAG}" ] && { echo "DOCKER_TAG is not set"; exit 1; }


          ### Append BRAHCH_NAME to DOCKER_TAG for the branches other than master
          if [[ $BRANCH_TYPE != "master" ]]; then
            DOCKER_TAG="${BRANCH_NAME}-${DOCKER_TAG}"
          fi
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "DOCKER_TAG=$DOCKER_TAG"

          
          

  build_and_push:
    needs: init
    uses: btungut-phonestore/devops/.github/workflows/workflow-docker-build-push.yml@master
    with:
      runs-on: ${{ inputs.runs-on }}
      build-docker-context-path: ${{ inputs.build-docker-context-path }}
      build-docker-file-path: ${{ inputs.build-docker-file-path }}
      docker-server: ${{ inputs.docker-server }}
      docker-repository: ${{ inputs.docker-repository }}
      docker-tag: ${{ needs.init.outputs.DOCKER_TAG }}
      docker-build-only: ${{ inputs.docker-build-only }}
    secrets:
      docker-username: ${{ secrets.docker-username }}
      docker-password: ${{ secrets.docker-password }}
      gh-token: ${{ secrets.gh-token }}



  helm_upgrade:
    needs:
      - init
      - build_and_push
    if: ${{ needs.init.outputs.BRANCH_TYPE == 'master' }} 
    runs-on: ${{ inputs.runs-on }}
    env:
      DOCKER_REPO: ${{ needs.build_and_push.outputs.DOCKER_REPO }}
      DOCKER_TAG: ${{ needs.build_and_push.outputs.DOCKER_TAG }}
      GIT_COMMIT_ID: ${{ needs.build_and_push.outputs.GIT_COMMIT_ID }}
      GIT_COMMIT_MSG: ${{ needs.build_and_push.outputs.GIT_COMMIT_MSG }}
      GIT_COMITTER: ${{ needs.build_and_push.outputs.GIT_COMITTER }}
      GIT_COMMIT_DATE: ${{ needs.build_and_push.outputs.GIT_COMMIT_DATE }}
    steps: 
      - uses: btungut-phonestore/devops/.github/actions/common@master
        id: common-vars

      - uses: btungut-phonestore/devops/.github/actions/git-checkout@master
        with:
          gitToken: ${{ secrets.gh-token }}
          checkoutGitOps: true
          gitOpsBranch: 'dev'

      - name: update values.yaml
        shell: bash
        run: |
          set -euo pipefail

          [ -z "${{ env.DOCKER_REPO }}" ] && { echo "DOCKER_REPO is not set"; exit 1; }
          [ -z "${{ env.DOCKER_TAG }}" ] && { echo "DOCKER_TAG is not set"; exit 1; }
          [ -z "${{ env.GIT_COMMIT_ID }}" ] && { echo "GIT_COMMIT_ID is not set"; exit 1; }
          [ -z "${{ env.GIT_COMMIT_MSG }}" ] && { echo "GIT_COMMIT_MSG is not set"; exit 1; }
          [ -z "${{ env.GIT_COMITTER }}" ] && { echo "GIT_COMITTER is not set"; exit 1; }
          
          CHART_DIR="${{ inputs.gitops-helm-chart-path }}"
          [ -d "${CHART_DIR}" ] || { echo "Directory ${CHART_DIR} does not exist"; exit 1; }
          pushd "${CHART_DIR}"
          tree .

          [ -f "values.yaml" ] || { echo "File values.yaml does not exist in $PWD"; exit 1; }
          [ -f "Chart.yaml" ] || { echo "File Chart.yaml does not exist in $PWD"; exit 1; }

          CHART_NAME=`yq '.name' Chart.yaml`
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV

          CHART_VERSION=`yq '.version' Chart.yaml`
          ARR=(${CHART_VERSION//./ })
          NEW_CHART_VERSION="${ARR[0]}.${ARR[1]}.${ARR[2]%%-*}-${{ steps.common-vars.outputs.rev-name }}"
          echo "NEW_CHART_VERSION=$NEW_CHART_VERSION" >> $GITHUB_ENV
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".version" "${NEW_CHART_VERSION}" "${{ env.GIT_COMMIT_ID }}"
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".appVersion" "\"${{ env.GIT_COMMIT_ID }}\""
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".description" "\"${{ env.GIT_COMMIT_MSG }} (${{ env.GIT_COMITTER }} at ${{ env.GIT_COMMIT_DATE }})\""
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh values.yaml ".deployment.image.repository" "\"${{ env.DOCKER_REPO }}\""
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh values.yaml ".deployment.image.tag" "\"${{ env.DOCKER_TAG }}\""

        working-directory: gitops

      - name: git commit and push
        shell: bash
        run: |
          set -euo pipefail

          TARGET_BRANCH="dev"
          echo "TARGET_BRANCH=$TARGET_BRANCH"

          RELEASE_BRANCH="release/${CHART_NAME}-${NEW_CHART_VERSION}"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH"

          git checkout -B "${RELEASE_BRANCH}"
          echo "git branch created (${RELEASE_BRANCH})"

          git add -A
          echo "git changes added"

          git commit -m "Release ${CHART_NAME} ${NEW_CHART_VERSION}"
          echo "git commit done"

          git checkout "${TARGET_BRANCH}"
          git pull origin "${TARGET_BRANCH}"
          echo "git pull done"

          git merge "${RELEASE_BRANCH}"
          echo "git merge done"

          git push origin "${TARGET_BRANCH}"
        working-directory: gitops