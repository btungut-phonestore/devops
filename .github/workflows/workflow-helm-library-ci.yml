on:
  workflow_call: 
    inputs:
      
      runs-on:
        required: true
        type: string
        description: 'Runs on'

      library-chart-path:
        required: true
        type: string
        description: 'Library chart path'

      test-chart-path:
        required: true
        type: string
        description: 'Test chart path'

      docker-server:
        required: true
        type: string
        description: 'Docker registry server'

    secrets:
      docker-username:
        required: true
        description: 'Docker username for login to docker registry'
      docker-password:
        required: true
        description: 'Docker password for login to docker registry'

    outputs:
      GIT_COMMIT_ID:
        value: ${{ jobs.helm_pkg_push.outputs.GIT_COMMIT_ID }}
      GIT_COMMIT_MSG:
        value: ${{ jobs.helm_pkg_push.outputs.GIT_COMMIT_MSG }}
      GIT_COMITTER:
        value: ${{ jobs.helm_pkg_push.outputs.GIT_COMITTER }}
      GIT_COMMIT_DATE:
        value: ${{ jobs.helm_pkg_push.outputs.GIT_COMMIT_DATE }}
      NEW_CHART_VERSION_BETA:
        value: ${{ jobs.helm_pkg_push.outputs.NEW_CHART_VERSION_BETA }}
      
jobs:
  helm_pkg_push:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      GIT_COMMIT_ID: ${{ steps.git-variables.outputs.GIT_COMMIT_ID }}
      GIT_COMMIT_MSG: ${{ steps.git-variables.outputs.GIT_COMMIT_MSG }}
      GIT_COMITTER: ${{ steps.git-variables.outputs.GIT_COMITTER }}
      GIT_COMMIT_DATE: ${{ steps.git-variables.outputs.GIT_COMMIT_DATE }}
      NEW_CHART_VERSION_BETA: ${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}
    steps:
      - uses: btungut-phonestore/devops/.github/actions/common@master
        id: common-vars

      - uses: btungut-phonestore/devops/.github/actions/git-checkout@master
        with:
          gitToken: ${{ secrets.GITHUB_TOKEN }}

      - name: prepare versions
        shell: bash
        id: chart-step
        run: |
          set -euo pipefail

          pushd ${{ inputs.library-chart-path }}
          echo "PWD : $(pwd)"

          CHART_NAME=`yq '.name' Chart.yaml`
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_OUTPUT
          echo "CHART_NAME=$CHART_NAME"

          CHART_VERSION=`yq '.version' Chart.yaml`
          ARR=(${CHART_VERSION//./ })
          CURRENT_CHART_VERSION="${ARR[0]}.${ARR[1]}.${ARR[2]}"
          echo "Current chart version : $CURRENT_CHART_VERSION"

          REV=$((${ARR[2]} + 1))
          NEW_CHART_VERSION_STABLE="${ARR[0]}.${ARR[1]}.${REV}"
          echo "NEW_CHART_VERSION_STABLE=$NEW_CHART_VERSION_STABLE" >> $GITHUB_ENV
          echo "NEW_CHART_VERSION_STABLE=$NEW_CHART_VERSION_STABLE" >> $GITHUB_OUTPUT
          echo "NEW_CHART_VERSION_STABLE=$NEW_CHART_VERSION_STABLE"

          NEW_CHART_VERSION_BETA="${CURRENT_CHART_VERSION}-${{ steps.common-vars.outputs.rev-name }}"
          echo "NEW_CHART_VERSION_BETA=$NEW_CHART_VERSION_BETA" >> $GITHUB_ENV
          echo "NEW_CHART_VERSION_BETA=$NEW_CHART_VERSION_BETA" >> $GITHUB_OUTPUT
          echo "NEW_CHART_VERSION_BETA=$NEW_CHART_VERSION_BETA"

        working-directory: app




      - name: git variables of app
        id: git-variables
        shell: bash
        run: |
          set -euo pipefail

          DIR_CHART="${{ inputs.library-chart-path }}"
          [ -d $DIR_CHART ] || { echo "DIR_CHART (${DIR_CHART}) does not exist"; exit 1; }

          DIR_TEST="${{ inputs.test-chart-path }}"
          [ -d $DIR_TEST ] || { echo "DIR_TEST (${DIR_TEST}) does not exist"; exit 1; }

          GIT_COMMIT_ID=`git log -n 1 --format="%h" -- $DIR_CHART $DIR_TEST`
          echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" >> $GITHUB_ENV
          echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" 

          GIT_COMMIT_MSG=`git log -n 1 --format="%s" -- $DIR_CHART $DIR_TEST`
          echo "GIT_COMMIT_MSG=$GIT_COMMIT_MSG" >> $GITHUB_ENV
          echo "GIT_COMMIT_MSG=$GIT_COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT_MSG=$GIT_COMMIT_MSG"

          GIT_COMITTER=`git log -n 1 --format="%cn" -- $DIR_CHART $DIR_TEST`
          echo "GIT_COMITTER=$GIT_COMITTER" >> $GITHUB_ENV
          echo "GIT_COMITTER=$GIT_COMITTER" >> $GITHUB_OUTPUT
          echo "GIT_COMITTER=$GIT_COMITTER"

          GIT_COMMIT_DATE=`git log -n 1 --format="%ci" -- $DIR_CHART $DIR_TEST`
          echo "GIT_COMMIT_DATE=$GIT_COMMIT_DATE" >> $GITHUB_ENV
          echo "GIT_COMMIT_DATE=$GIT_COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT_DATE=$GIT_COMMIT_DATE"

        working-directory: app

      - name: update Chart.yaml
        shell: bash
        run: |
          set -euo pipefail

          pushd ${{ inputs.library-chart-path }}
          echo "PWD : $(pwd)"

          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".version" "${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}" "${{ steps.chart-step.outputs.NEW_CHART_VERSION_STABLE }}"
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".appVersion" "\"${{ steps.git-variables.outputs.GIT_COMMIT_ID }}\""
          ${{ github.workspace }}/devops/scripts/modify-yaml.sh Chart.yaml ".description" "\"${{ steps.git-variables.outputs.GIT_COMMIT_MSG }} (${{ steps.git-variables.outputs.GIT_COMITTER }} - ${{ steps.git-variables.outputs.GIT_COMMIT_DATE }})\""

          echo "Chart.yaml is updated."
          echo "---------------------------------"
          cat Chart.yaml
          echo "---------------------------------"
        working-directory: app

      - name: template test chart
        shell: bash
        run: |
          set -euo pipefail

          pushd ${{ inputs.test-chart-path }}
          echo "PWD : $(pwd)"

          helm dep update . --skip-refresh
          echo "Helm dependency update is succeeded."
          
          helm template .
          echo "Helm template is succeeded."
        working-directory: app

      - name: package chart
        shell: bash
        run: |
          set -euo pipefail

          pushd ${{ inputs.library-chart-path }}
          echo "PWD : $(pwd)"

          helm package . -d ${{ github.workspace }}
          echo "Helm package is succeeded."
        working-directory: app

      - name: generate build yaml
        shell: bash
        run: |
          set -euo pipefail

          touch build.yaml
          yq -i '.chart.name="${{ steps.chart-step.outputs.CHART_NAME }}"' build.yaml
          yq -i '.versions.beta="${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}"' build.yaml
          yq -i '.versions.stable="${{ steps.chart-step.outputs.NEW_CHART_VERSION_STABLE }}"' build.yaml
          yq -i '.git.commit="${{ steps.git-variables.outputs.GIT_COMMIT_ID }}"' build.yaml
          yq -i '.git.message="${{ steps.git-variables.outputs.GIT_COMMIT_MSG }}"' build.yaml
          yq -i '.git.committer="${{ steps.git-variables.outputs.GIT_COMITTER }}"' build.yaml
          yq -i '.git.date="${{ steps.git-variables.outputs.GIT_COMMIT_DATE }}"' build.yaml
          yq -i '.git.actor="${{ github.actor }}"' build.yaml

      - name: docker build init
        uses: docker/setup-buildx-action@v3

      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker-server }}
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: helm push
        shell: bash
        run: |
          set -euo pipefail

          files=(*.tgz)
          file=${files[0]}

          helm push ${file} oci://${{ inputs.docker-server }}
          echo "Helm push is succeeded."

      - uses: actions/upload-artifact@v4
        with:
          name: chart
          path: |
            ${{ github.workspace }}/*.tgz
            ${{ github.workspace }}/build.yaml

      # create prerelease
      - name: create prerelease
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}
          tag_name: ${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}
          files: |
            ${{ github.workspace }}/*.tgz
            ${{ github.workspace }}/build.yaml
          draft: false
          prerelease: true
          body: |
            Chart: `${{ steps.chart-step.outputs.CHART_NAME }}`
            Version: `${{ steps.chart-step.outputs.NEW_CHART_VERSION_BETA }}`
            Commit: `${{ steps.git-variables.outputs.GIT_COMMIT_ID }}`
            Message: `${{ steps.git-variables.outputs.GIT_COMMIT_MSG }}`
            Committer: `${{ steps.git-variables.outputs.GIT_COMITTER }}`
            Date: `${{ steps.git-variables.outputs.GIT_COMMIT_DATE }}`
            Stable Version: `${{ steps.chart-step.outputs.NEW_CHART_VERSION_STABLE }}`